name: Build and Deploy

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 (dev 또는 prod)'
        required: true
        default: 'dev'
      module:
        description: '배포할 모듈명 (예: bizcof-wms-app 또는 bizcof-mes-app)'
        required: true
        default: 'bizcof-wms-app'

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  TARGET_SERVER_IP_DEV: 192.168.0.13
  TARGET_SERVER_IP_PROD: 192.168.0.14
  REMOTE_USER: root

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    env:
      MODULE_NAME: ${{ github.event.inputs.module || 'bizcof-wms-app' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build the module
        run: |
          ./gradlew :${MODULE_NAME}:clean :${MODULE_NAME}:build -x test
          ls -la ${MODULE_NAME}/build/libs

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MODULE_NAME }}-jar
          path: ${{ env.MODULE_NAME }}/build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    env:
      MODULE_NAME: ${{ github.event.inputs.module || 'bizcof-wms-app' }}
      ENV_PROFILE: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.MODULE_NAME }}-jar

      - name: Unzip downloaded artifact
        run: |
          unzip -q ${{ env.MODULE_NAME }}-jar.zip -d extracted

      - name: Set target server IP by profile
        id: set-ip
        run: |
          if [[ "${{ env.ENV_PROFILE }}" == "prod" ]]; then
            echo "SERVER_IP=${{ env.TARGET_SERVER_IP_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "SERVER_IP=${{ env.TARGET_SERVER_IP_DEV }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Remote Server via SCP and SSH
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ steps.set-ip.outputs.SERVER_IP }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          JAR_PATH=$(find ./extracted -name "${MODULE_NAME}-*.jar" | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "JAR not found!"; exit 1;
          fi

          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "mkdir -p /app/servers/${MODULE_NAME}"

          scp -o StrictHostKeyChecking=no -i private_key.pem "$JAR_PATH" $REMOTE_USER@$SERVER_IP:/app/servers/${MODULE_NAME}/

          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "sudo systemctl restart ${MODULE_NAME}.service"

          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "sudo systemctl status ${MODULE_NAME}.service"
