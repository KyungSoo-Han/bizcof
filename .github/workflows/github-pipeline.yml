name: Build and Deploy

# 트리거: master 또는 develop 브랜치에 push 될 때, 혹은 수동 실행(workflow_dispatch)
on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      environment:  # 실행 환경 입력 (수동 실행 시)
        description: '배포 환경 (dev 또는 prod)'
        required: true
        default: 'dev'
      module:       # 배포할 모듈명 입력 (수동 실행 시)
        description: '배포할 모듈명 (예: bizcof-wms-app 또는 bizcof-mes-app)'
        required: true
        default: 'bizcof-wms-app'

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

  # 각 환경에 따른 서버 IP를 정의
  TARGET_SERVER_IP_DEV: 192.168.0.13
  TARGET_SERVER_IP_PROD: 192.168.0.14  # 프로덕션 서버 예시

  # 배포 시 사용할 원격 접속 계정
  REMOTE_USER: root

jobs:
  build:
    runs-on: ubuntu-latest
    # 조건: master, develop 브랜치 push 또는 수동 실행 시만 작동
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    # 입력 값이 없을 경우 기본값으로 bizcof-wms-app 사용
    env:
      MODULE_NAME: ${{ github.event.inputs.module || 'bizcof-wms-app' }}

    steps:
      - uses: actions/checkout@v3  # 소스코드 checkout

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}  # 예: temurin
          java-version: ${{ env.JAVA_VERSION }}       # 예: 17

      - name: Build the module
        run: |
          # 멀티모듈 중 선택한 모듈만 빌드
          ./gradlew :${MODULE_NAME}:clean :${MODULE_NAME}:build -x test
          # 결과 파일 리스트 출력
          ls -la ${MODULE_NAME}/build/libs

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MODULE_NAME }}-jar
          path: ${{ env.MODULE_NAME }}/build/libs/*.jar  # 빌드 결과물 업로드

  deploy:
    runs-on: ubuntu-latest
    needs: build  # 빌드 완료 후 실행
    # 조건: master, develop 브랜치 push 또는 수동 실행 시만 작동
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    env:
      MODULE_NAME: ${{ github.event.inputs.module || 'bizcof-wms-app' }}
      ENV_PROFILE: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - uses: actions/checkout@v3  # 코드 checkout (일부 SSH 키 설정이나 파일 읽기에 필요할 수 있음)

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.MODULE_NAME }}-jar  # 빌드 Job에서 업로드한 결과물 가져오기

      - name: Set target server IP by profile
        id: set-ip
        run: |
          # 환경값(environment)에 따라 배포 대상 서버 IP 설정
          if [[ "${{ env.ENV_PROFILE }}" == "prod" ]]; then
            echo "SERVER_IP=${{ env.TARGET_SERVER_IP_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "SERVER_IP=${{ env.TARGET_SERVER_IP_DEV }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Remote Server via SCP and SSH
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # GitHub에 저장된 SSH 키 사용
          SERVER_IP: ${{ steps.set-ip.outputs.SERVER_IP }}
        run: |
          # 개인 키를 임시 파일로 저장 (보안상 권한 600으로 설정)
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # 업로드된 JAR 파일 경로를 탐색
          JAR_PATH=$(find . -path "./${MODULE_NAME}/build/libs/${MODULE_NAME}-*.jar" | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "JAR not found!"; exit 1;
          fi

          # 원격 서버에 디렉토리 생성
          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "mkdir -p /app/servers/${MODULE_NAME}"

          # JAR 파일을 SCP로 복사
          scp -o StrictHostKeyChecking=no -i private_key.pem "$JAR_PATH" \
            $REMOTE_USER@$SERVER_IP:/app/servers/${MODULE_NAME}/

          # 서비스 재시작 및 상태 확인
          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "sudo systemctl restart ${MODULE_NAME}.service"
          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "sudo systemctl status ${MODULE_NAME}.service"
