# GitHub Actions: Build and Deploy for Multi-Module Spring Boot Project

name: Build and Deploy

# 트리거 조건 정의
on:
  push:
    branches:
      - master     # ✅ master 브랜치에 push 시 자동 실행
      - develop    # ✅ develop 브랜치에 push 시 자동 실행 (필요시 제거 가능)
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 (dev 또는 prod)'
        required: true
        default: 'dev'
      module:
        description: '배포할 모듈명 (예: bizcof-wms-app 또는 bizcof-mes-app)'
        required: true
        default: 'bizcof-wms-app'

# 공통 환경 변수 설정
env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  TARGET_SERVER_IP_DEV: 192.168.0.13        # 개발 서버 IP
  TARGET_SERVER_IP_PROD: 192.168.0.14       # 운영 서버 IP
  REMOTE_USER: root                         # 배포에 사용할 SSH 계정

jobs:
  build:
    runs-on: ubuntu-latest
    # master 또는 develop 브랜치 push, 혹은 수동 실행 시에만 실행
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    env:
      MODULE_NAME: ${{ github.event.inputs.module || 'bizcof-wms-app' }}
    steps:
      - uses: actions/checkout@v3  # 소스코드 체크아웃

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}  # Temurin 배포판 사용
          java-version: ${{ env.JAVA_VERSION }}        # Java 17 버전 설정

      - name: Build the module
        run: |
          # Gradle로 해당 모듈 빌드 (멀티 모듈 프로젝트 기준)
          ./gradlew :${MODULE_NAME}:clean :${MODULE_NAME}:build -x test
          # 빌드된 JAR 파일 출력 확인
          ls -la ${MODULE_NAME}/build/libs

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MODULE_NAME }}-jar  # 아티팩트 이름
          path: ${{ env.MODULE_NAME }}/build/libs/*.jar  # 빌드 결과 JAR 파일 경로

  deploy:
    runs-on: ubuntu-latest
    needs: build  # build job이 성공해야 deploy 실행
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    env:
      MODULE_NAME: ${{ github.event.inputs.module || 'bizcof-wms-app' }}
      ENV_PROFILE: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v3  # 코드 체크아웃 (옵션에 따라 SSH 키 사용 가능)

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.MODULE_NAME }}-jar  # 빌드 Job에서 업로드한 아티팩트 이름

      - name: Deploy to Remote Server via SCP and SSH
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}   # GitHub Secrets에 등록된 개인 키
          SERVER_IP: ${{ env.ENV_PROFILE == 'prod' && env.TARGET_SERVER_IP_PROD || env.TARGET_SERVER_IP_DEV }}
        run: |
          # 개인키 파일 저장 및 권한 설정
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # 다운로드된 아티팩트 디렉토리 내에서 JAR 파일 탐색
          JAR_PATH=$(find ./${MODULE_NAME}-jar -name "${MODULE_NAME}-*.jar" | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "JAR not found!"; exit 1;
          fi

          # 서버에 배포 디렉토리 생성
          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "mkdir -p /app/servers/${MODULE_NAME}"

          # JAR 파일 원격 서버로 전송
          scp -o StrictHostKeyChecking=no -i private_key.pem "$JAR_PATH" $REMOTE_USER@$SERVER_IP:/app/servers/${MODULE_NAME}/

          # 서비스 재시작 및 상태 확인
          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "sudo systemctl restart ${MODULE_NAME}.service"

          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$SERVER_IP \
            "sudo systemctl status ${MODULE_NAME}.service"
